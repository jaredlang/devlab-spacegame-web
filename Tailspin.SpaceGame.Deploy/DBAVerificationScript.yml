stages:
- stage: DBAVerificationScript
  displayName: 'Script database schema changes'
  dependsOn: Build
  jobs:
  - deployment: DBAVerificationScript
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: 'Release'
    environment: 'dbaverificationscript'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          - task: SqlAzureDacpacDeployment@1
            displayName: Generate schema change script
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              authenticationType: 'server'
              serverName: '$(SQLServerName).database.windows.net'
              databaseName: '$(SQLDatabaseName)'
              sqlUsername: '$(SQLAdminUserName)'
              sqlPassword: '$(SQLAdminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Script'
              dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'
          - task: PowerShell@2
            displayName: Show Auto Generated SQL Script
            inputs:
              targetType: 'inline'
              script: | 
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content d:\a\1\s\GeneratedOutputFiles\$(SQLDatabaseName)_Script.sql | foreach {Write-Output $_}
          - task: PowerShell@2
            displayName: Show change script and check for schema changes
            inputs:
              targetType: 'inline'
              script: | 
                # Print the schema change script
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content d:\a\1\s\GeneratedOutputFiles\$(SQLDatabaseName)_Script.sql | foreach {Write-Output $_}

                # Check for schema changes
                $file = Get-Content "d:\a\1\s\GeneratedOutputFiles\$(SQLDatabaseName)_Script.sql"
                $containsWord = $file | %{$_ -match "CREATE" -or $_ -match "ALTER" -or $_ -match "DROP"}
                if ($containsWord -contains $true) {
                  Install-Module VSTeam -Scope CurrentUser -Force
                  Set-VSTeamAccount â€“Account $(DevOpsOrg) -PersonalAccessToken $(PAT)
                  $methodParameters = @{
                    ProjectName = "$(System.TeamProject)"
                    Name = "Release"}
                  $vg = Get-VSTeamVariableGroup @methodParameters
                  $vars = @{}
                  $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                  $varName = "schemaChanged"
                  $vars.$varName= @{}
                  $vars.$varName.value = "True"
                  $vars.$varName.isSecret = $false
                  $methodParameters = @{
                    id = $vg.id
                    ProjectName = "$(System.TeamProject)"
                    Name = "Release"
                    Description = ""
                    Type = "Vsts"
                    Variables = $vars}
                  Update-VSTeamVariableGroup @methodParameters} 

