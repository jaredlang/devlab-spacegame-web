trigger:
  batch: true
  branches:
    include:
    - master
    - releases/*
    exclude:
    - experiments/*
  paths:
    exclude:
    - README.md
    - LICENSE*

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.1.100'   
  
stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
        - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
    
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'        

    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        projects: '**/*.Tests.csproj'
        arguments: '--no-build --configuration $(buildConfiguration)'
        publishTestResults: true
        testRunTitle: 'Unit Tests'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '$(System.DefaultWorkingDirectory)/**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - task: WhiteSource Bolt@20
      displayName: 'Run WhiteSource Bolt'
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()

  - job: BuildDacpac
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: VSBuild@1
      displayName: 'Build the database project'
      inputs:
        project: '**/*.sqlproj'

    - task: CopyFiles@2
      displayName: 'Copy dacpac file to staging directory'
      inputs:
        contents: |
          Tailspin.SpaceGame.Database/bin/**/*.dacpac
        targetFolder: '$(Build.StagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: dropDacpac
      condition: succeededOrFailed()


- stage: DBAVerificationScript
  displayName: 'Script database schema changes'
  dependsOn: Build
  jobs:
  - deployment: DBAVerificationScript
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: 'Release'
    environment: 'dbaverificationscript'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          - task: SqlAzureDacpacDeployment@1
            displayName: Generate schema change script
            inputs:
              azureSubscription: 'LSG-Tailspin-SpaceGame'
              authenticationType: 'server'
              serverName: '$(SQLServerName).database.windows.net'
              databaseName: '$(SQLDatabaseName)'
              sqlUsername: '$(SQLAdminUserName)'
              sqlPassword: '$(SQLAdminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Script'
              dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'
          - task: PowerShell@2
            displayName: Show Auto Generated SQL Script
            inputs:
              targetType: 'inline'
              script: | 
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content d:\a\1\s\GeneratedOutputFiles\$(SQLDatabaseName)_Script.sql | foreach {Write-Output $_}
          - task: PowerShell@2
            displayName: Show change script and check for schema changes
            inputs:
              targetType: 'inline'
              script: | 
                # Print the schema change script
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content d:\a\1\s\GeneratedOutputFiles\$(SQLDatabaseName)_Script.sql | foreach {Write-Output $_}

                # Check for schema changes
                $file = Get-Content "d:\a\1\s\GeneratedOutputFiles\$(SQLDatabaseName)_Script.sql"
                $containsWord = $file | %{$_ -match "CREATE" -or $_ -match "ALTER" -or $_ -match "DROP"}
                if ($containsWord -contains $true) {
                  Install-Module VSTeam -Scope CurrentUser -Force
                  Set-VSTeamAccount –Account $(DevOpsOrg) -PersonalAccessToken $(PAT)
                  $methodParameters = @{
                    ProjectName = "$(System.TeamProject)"
                    Name = "Release"}
                  $vg = Get-VSTeamVariableGroup @methodParameters
                  $vars = @{}
                  $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                  $varName = "schemaChanged"
                  $vars.$varName= @{}
                  $vars.$varName.value = "True"
                  $vars.$varName.isSecret = $false
                  $methodParameters = @{
                    id = $vg.id
                    ProjectName = "$(System.TeamProject)"
                    Name = "Release"
                    Description = ""
                    Type = "Vsts"
                    Variables = $vars}
                  Update-VSTeamVariableGroup @methodParameters} 

- stage: DBAVerificationApply
  displayName: 'Apply database schema changes'
  dependsOn: DBAVerificationScript
  variables:
  - group: 'Release'
  condition: |
    and
    (
      succeeded('DBAVerificationScript'), 
      eq(variables['schemaChanged'], True)
    )
  jobs:
  - deployment: DBAVerificationApply
    pool:
      vmImage: 'windows-2019'
    environment: 'dbaverificationapply'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Deploy SQL schema'
            inputs:
              azureSubscription: 'LSG-Tailspin-SpaceGame'
              authenticationType: 'server'
              serverName: '$(SQLServerName).database.windows.net'
              databaseName: '$(SQLDatabaseName)'
              sqlUsername: '$(SQLAdminUserName)'
              sqlPassword: '$(SQLAdminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Publish'
              dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'
          - task: PowerShell@2
            displayName: 'Remove "schemaChanged" pipeline variable'
            inputs:
              targetType: 'inline'
              script: | 
                Install-Module VSTeam -Scope CurrentUser -Force
                Set-VSTeamAccount –Account $(DevOpsOrg) -PersonalAccessToken $(PAT)
                $methodParameters = @{
                  ProjectName = "$(System.TeamProject)"
                  Name = "Release"}
                $vg = Get-VSTeamVariableGroup  @methodParameters 
                $vars = @{}
                $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
                $vars.Remove("schemaChanged")
                $methodParameters = @{
                  id = $vg.id
                  ProjectName = "$(System.TeamProject)"
                  Name = "Release"
                  Description = ""
                  Type = "Vsts"
                  Variables = $vars}
                Update-VSTeamVariableGroup @methodParameters


- stage: 'DeployFunction'
  displayName: 'Deploy the leaderboard function'
  dependsOn:
  - DBAVerificationScript
  - DBAVerificationApply  
  condition: |
    and 
    (
      succeeded('DBAVerificationScript'),
      in(dependencies.DBAVerificationApply.result, 'Succeeded', 'Skipped')
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: spike
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop          
          - task: AzureFunctionApp@1
            displayName: 'Azure Function App Deploy: leaderboard'
            inputs: 
              azureSubscription: 'LSG-Tailspin-SpaceGame'
              appName: '$(LeaderboardAppName)'
              appType: functionAppLinux
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.LeaderboardFunction.zip'
              runtimeStack: DOCKER|microsoft/azure-functions-dotnet-core2.0:2.0
              startUpCommand: 'func azure functionapp publish $(functionAppName) --no-bundler'
  
- stage: 'DeployToDev'
  displayName: 'Deploy to the dev environment'
  dependsOn: DeployFunction
  condition: succeeded('DeployFunction')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'LSG-Tailspin-SpaceGame'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip'

- stage: 'DeployToTest'
  displayName: 'Deploy to the test environment'
  dependsOn: DeployToDev
  condition: succeeded('DeployToDev')
  # condition: eq(variables['Build.Reason'], 'Schedule')
  variables:
  - group: Release
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'LSG-Tailspin-SpaceGame'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip'
  - job: RunUITests
    displayName: 'Run UI tests'
    dependsOn: Deploy
    pool:
      vmImage: 'windows-2019'
    steps: 
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration)'
        projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Run UI tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration)'
        projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
        publishTestResults: true
        testRunTitle: 'UI Tests'

- stage: 'DeployToStaging'
  displayName: 'Deploy to the staging environment'
  dependsOn: DeployToTest
  condition: succeeded('DeployToTest')
  variables:
  - group: Release
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: staging
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'LSG-Tailspin-SpaceGame'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip'  
  - job: RunLoadTests
    dependsOn: Deploy
    displayName: 'Run load tests'
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      jmeterVersion: '5.2.1'
      perfTestDirectory: '$(System.DefaultWorkingDirectory)/Tailspin.SpaceGame.Web.PerfTests'
    steps: 
    - script: ls -l $(System.DefaultWorkingDirectory)
      displayName: 'List the files under $(System.DefaultWorkingDirectory)'
    - script: cat $(perfTestDirectory)/LoadTest.jmx
      displayName: 'Display the Load test Settings'
    - script: |
        wget -c ftp.ps.pl/pub/apache/jmeter/binaries/apache-jmeter-$(jmeterVersion).tgz
        tar -xf apache-jmeter-$(jmeterVersion).tgz
      displayName: 'Install Apache JMeter'
    - script: apache-jmeter-$(jmeterVersion)/bin/./jmeter -n -t $(perfTestDirectory)/LoadTest.jmx -o Results.xml -Jhostname=$(HostNameStaging)
      displayName: 'Run Load tests'
    - script: ls -l Results.xml
      displayName: 'List the Load test results file'
    - script: |
        sudo apt-get update
        sudo apt-get install xsltproc
        xsltproc $(perfTestDirectory)/JMeter2JUnit.xsl Results.xml > JUnit.xml
      displayName: 'Transform JMeter output to JUnit'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: JUnit.xml
        testRunTitle: 'Load Tests'

- stage: 'DeployToProduction'
  displayName: 'Deploy to the Production (pre-release slot) 
  dependsOn: 'DeployToStaging'
  condition: succeeded('DeployToStaging')
  jobs: 
  - deployment: Deploy
    pool: 
      vmImage: 'ubuntu-16.04'
    environment: production
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy: 
          steps: 
          - download: current 
            artifact: drop 
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs: 
              azureSubscription: 'LSG-Tailspin-SpaceGame'
              deployToSlotOrASE: 'true'
              resourceGroupName: '$(ResourceGroupName)'
              slotName: '$(WebAppNameProductionRC1Slot)'
              appName: '$(WebAppNameProduction)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip' 
